@model redinc_reboot.Models.ProblemViewModel
@{
    ViewBag.Title = "Edit Problem";
}

<h2>Edit Problem</h2>
<p>
    <a href="#confirmModal" role="button" class="btn btn-danger" data-toggle="modal">Delete</a>
</p>

@using (Html.BeginConfirmModal("Delete Problem?"))
{
    <p>
        Are you sure you want to delete @Model.Problem.Name? 
        Doing so will also delete all recorded student solutions. 
        This cannot be undone.
    </p>
}

@using (Html.BeginForm())
{
    <fieldset>
        @Html.HiddenFor(m => m.Problem.Id)
        @Html.HiddenFor(m => m.Problem.Class.Id)
        @Html.LabelFor(m => m.Problem.Name)
        @Html.TextBoxFor(m => m.Problem.Name)

        @Html.LabelFor(m => m.Problem.Description)
        @Html.TextAreaFor(m => m.Problem.Description, new { id = "descriptionArea" })

        @Html.LabelFor(m => m.Problem.SolutionCode, "Solution Code")
        <div id="solutionArea" style="position:relative; height: 300px; width: 700px;">@Model.Problem.SolutionCode</div>
        @Html.HiddenFor(m => m.Problem.SolutionCode, new { id = "hiddenSolution" })

        <br />
        <button type="button" class="btn" data-toggle="collapse" data-target="#testDiv">
          Show/Hide Test code area
        </button>

        <div id="testDiv" class="collapse">
            <br /><br />
            @Html.Label("Test Code")
            <div id="testArea" style="position:relative; height: 300px; width: 700px;"></div>
            
            <br />
            <input id="testButton" type="button" value="Test" />
        </div>

        <br /><br />
        @if (ViewBag.IsInstructor)
        {
            <table id="setTable" class="prereq-table">
                <tr>
                    <th class="set-th">Problem Set</th>
                    <th class="set-th">Delete</th>
                </tr>
                @foreach (var prereq in Model.Sets)
                {
                    Html.RenderPartial("EditorTemplates/ProblemSetRow", prereq);
                }
            </table>
            <br />
            <label for="addSet" style="display: inline-block">Add:</label>
            <input type="text" id="addSet" />
        }
        <br /><br />

        <input id="submitButton" type="submit" value="Save" />
    </fieldset>
}

@section styles
{
    @Styles.Render("~/Libs/markitup/skins/simple/css")
    @Styles.Render("~/Libs/markitup/sets/bbcode/css")
    <link href="~/Content/autocomplete.css" rel="stylesheet" />
    <link href="~/Content/ace_editor.css" rel="stylesheet" />
}

@section scripts
{
    @Scripts.Render("~/Libs/markitup/js")
    <script src="http://rawgithub.com/ajaxorg/ace-builds/master/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
    <script type="text/javascript">
        $(function () {
            $('#descriptionArea').markItUp(mySettings);

            var editor = ace.edit("solutionArea");
            editor.setTheme("ace/theme/textmate");
            editor.getSession().setMode("ace/mode/python");
            editor.setDisplayIndentGuides(false);
            editor.setShowPrintMargin(false);
            
            var testEditor = ace.edit("testArea");
            testEditor.setTheme("ace/theme/textmate");
            testEditor.getSession().setMode("ace/mode/python");
            testEditor.setDisplayIndentGuides(false);
            testEditor.setShowPrintMargin(false);

            $("#setTable").on("click", "button.deleteSet", function () {
                $(this).parents("tr.set-row:first").remove();
                return false;
            });

            $('#addSet').autocomplete({
                source: '@Url.Action("Search", "ProblemSet")',
                minLength: 0,
                select: function (e, ui) {
                    $.ajax({
                        url: '@Url.Action("AddProblemSet")',
                        data: ui.item,
                        cache: false,
                        success: function (html) {
                            $("#setTable").append(html);
                        }
                    });
                    $(this).val('');
                    return false;
                }
            });

            $('#submitButton').click(function () {
                $('#hiddenSolution').val(editor.getValue());
            });

            $('#testButton').click(function () {
                $.ajax({
                    url: '@Url.Action("Test")',
                    type: 'POST',
                    data: {
                        id: @Model.Problem.Id,
                        instructorCode: editor.getValue(),
                        studentCode: testEditor.getValue()
                    },
                    success: function (data) {
                        if (data.success) {
                            alert("Correct!");
                        } else {
                            alert("Incorrect. Modify your code and try again.\r\n" + data.output);
                        }
                    }
                });
            });

            $('#confirmModalButton').click(function () {
                $('#confirmModalButton').prop('disabled', true);
                $.ajax({
                    url: '@Url.Action("Delete")',
                    type: 'POST',
                    data: {
                        id: @Model.Problem.Id
                    },
                    success: function (response) {
                        window.location.href = '@Url.Action("Home", "Class", new { id = @Model.Problem.Class.Id })';
                    }
                });
            });
        });
    </script>
}
